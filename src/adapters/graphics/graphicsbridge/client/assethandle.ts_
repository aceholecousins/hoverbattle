
import {Kind} from "utils"
import {WorkerBridge} from "worker/workerbridge"
import {Asset, LoadAssetFunction} from "domain/graphics/asset"

export class AssetHandle<K extends Kind> implements Asset<Kind>{
	kind: K
	index: number

	constructor(kind:K, index:number){
		this.kind = kind
		this.index = index
	}
}

export function createAssetLoaderClient<K extends Kind>(
	kind:K,
	bridge:WorkerBridge
):LoadAssetFunction<AssetHandle<K>>
{
	let assetIndex = 0
	let loadAssetOnServer = bridge.createCaller("gfx.loadAsset")

	return function(
		file: string,
		onLoaded?:()=>void, // TODO: proper implementation
		onError?:(err:ErrorEvent)=>void // TODO: proper implementation
	){
		const index = assetIndex++
		let asset = new AssetHandle(kind, index)
		loadAssetOnServer({kind, index, file})
		setTimeout(()=>{onLoaded()}, 0) // TODO: proper implementation
		return asset
	}
}