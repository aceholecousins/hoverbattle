!function(e){const{UniformsLib:a,Vector2:t,Color:i,TangentSpaceNormalMap:s,ShaderMaterial:r,RawShaderMaterial:n}=e;a.clearcoatnormalmap={clearcoatNormalScale:{value:new t(1,1)}};const l=["MeshDistanceMaterial","MeshMatcapMaterial","ShadowMaterial","SpriteMaterial","RawShaderMaterial","ShaderMaterial","PointsMaterial","MeshPhysicalMaterial","MeshStandardMaterial","MeshPhongMaterial","MeshToonMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshDepthMaterial","MeshBasicMaterial","LineDashedMaterial","LineBasicMaterial","Material","MeshFaceMaterial","MultiMaterial","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial"];for(let a of l)if(void 0!==e[a]){const t=e[a].prototype;t.type=a,t.customDepthMaterial=null,t.customDistanceMaterial=null,t.templates=[]}const o=e.ShaderMaterial.prototype.clone;function h(){const e=o.call(this);return e.templates=this.templates,e}function p(e){if(e&&e.uniforms)for(let a in e.uniforms)e.uniforms[a].linked&&(this.uniforms[a]=e.uniforms[a]);return this}function c(a){return e.Material.prototype.copy.call(this,a),this.fragmentShader=a.fragmentShader,this.vertexShader=a.vertexShader,this.uniforms=P(a.uniforms),this.defines=Object.assign({},a.defines),this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.lights=a.lights,this.clipping=a.clipping,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this.extensions=a.extensions,a.customDepthMaterial&&(this.customDepthMaterial=a.customDepthMaterial.clone().link(this)),a.customDistanceMaterial&&(this.customDistanceMaterial=a.customDistanceMaterial.clone().link(this)),this}function u(e){return void 0===this.uniforms[e]&&(this.uniforms[e]={value:null}),this.uniforms[e]}function M(a,t){let i={},s="",r="";const n=(t=t||{}).template||t.extends,l=new(t.class||(a.isMaterial&&a.constructor?a.constructor:null)||e.ShaderMaterial),o=t.material=t.material||{},h=Object.assign({},o.defines);let p;if(l.templates=[t],a.templates instanceof Array&&(l.templates=a.templates.concat(l.templates)),a instanceof Function){p=a.prototype.type;const n=d[p];if(void 0===n)return console.error('THREE.extendMaterial: no mapping for material class "%s" found',p),l;o.lights=void 0===o.lights||o.lights,i=_(n.name,i,t),s=e.ShaderChunk[n.id+"_vert"],r=e.ShaderChunk[n.id+"_frag"]}else if(a.isShaderMaterial)p=a.type,i=P(a.uniforms,i),s=a.vertexShader,r=a.fragmentShader,l.copy(a,!1),a.defines&&Object.assign(h,a.defines);else{p=a.type;const n=d[p];if(void 0===n)return console.error('THREE.extendMaterial: no mapping for material class "%s" found',p),l;o.lights=void 0===o.lights||o.lights,i=_(n.name,i,t),s=e.ShaderChunk[n.id+"_vert"],r=e.ShaderChunk[n.id+"_frag"];const h=e.ShaderLib[n.name].uniforms;for(let e in h)void 0!==i[e]||void 0===a[e]||null===a[e]&&!1!==t.explicit||(i[e]=i[e]||{value:null},i[e].value=a[e])}l.isCustomMaterial&&(l["is"+p]=!0),t.defines&&Object.assign(h,t.defines);let c=(t.header||"")+"\n";if(void 0!==t.vertex&&(s=b(s,t.vertex)),void 0!==t.fragment&&(r=b(r,t.fragment)),o.defines=h,o.uniforms=i,o.vertexShader=c+(t.vertexHeader||"")+"\n"+s,o.fragmentShader=c+(t.fragmentHeader||"")+"\n"+r,t.vertexEnd&&(o.vertexShader=o.vertexShader.replace(/\}(?=[^.]*$)/g,t.vertexEnd+"\n}")),t.fragmentEnd&&(o.fragmentShader=o.fragmentShader.replace(/\}(?=[^.]*$)/g,t.fragmentEnd+"\n}")),t.override)for(let e in t.override){const a=t.override[e],s=i[e]=i[e]||{value:null};for(let e in a)s[e]=a[e];s.mixed&&(t.uniforms||(t.uniforms={}),t.uniforms[e]=s)}if(n&&n.templates&&n.templates.length){t.class=t.class||n.class;for(let e of n.templates)w(o,e,A,h);for(let e in n.uniforms){const a=n.uniforms[e];a.linked&&(i[e]=a)}}if(L(l,t,o,h),l.setValues(o),l.isCustomMaterial)for(let e in i)x[e]&&i[e].value&&(l[e]=i[e]);for(let e in h)!1===h[e]&&delete h[e];return!a.isMeshDepthMaterial&&a!==e.MeshDepthMaterial||void 0!==h.DEPTH_PACKING||(h.DEPTH_PACKING=e.RGBADepthPacking),l}if(Object.assign(n.prototype,{extend:M,uniform:u,clone:h,link:p,copy:c}),Object.assign(r.prototype,{extend:M,uniform:u,clone:h,link:p,copy:c}),void 0!==e.ShaderMaterial.prototype.customDepthMaterial){const a={_customDepthMaterial:{enumerable:!0,value:void 0,writable:!0},_customDistanceMaterial:{enumerable:!0,value:void 0,writable:!0},customDepthMaterial:{get:function(){return this._customDepthMaterial||(this.material&&this.material.customDepthMaterial?this.material.customDepthMaterial:void 0)},set:function(e){this._customDepthMaterial=e}},customDistanceMaterial:{get:function(){return this._customDistanceMaterial||(this.material&&this.material.customDistanceMaterial?this.material.customDistanceMaterial:void 0)},set:function(e){this._customDistanceMaterial=e}}};Object.defineProperties(e.Mesh.prototype,a),Object.defineProperties(e.SkinnedMesh.prototype,a)}let m;e.CustomMaterial=function(e){r.call(this,e),this.type="CustomMaterial"},Object.assign(e.CustomMaterial.prototype,e.Material.prototype,e.ShaderMaterial.prototype,e.EventDispatcher.prototype,{isShaderMaterial:!0,isCustomMaterial:!0,isMeshPhongMaterial:!1,isMeshDistanceMaterial:!1,isMeshMatcapMaterial:!1,isShadowMaterial:!1,isSpriteMaterial:!1,isRawShaderMaterial:!1,isPointsMaterial:!1,isMeshPhysicalMaterial:!1,isMeshStandardMaterial:!1,isMeshPhongMaterial:!1,isMeshToonMaterial:!1,isMeshNormalMaterial:!1,isMeshLambertMaterial:!1,isMeshDepthMaterial:!1,isMeshBasicMaterial:!1,isLineDashedMaterial:!1,isLineBasicMaterial:!1,isMaterial:!1,isMeshFaceMaterial:!1,isMultiMaterial:!1,isPointCloudMaterial:!1,isParticleBasicMaterial:!1,isParticleSystemMaterial:!1,constructor:e.CustomMaterial,map:null,aoMap:null,envMap:null,bumpMap:null,normalMap:null,lightMap:null,emissiveMap:null,specularMap:null,roughnessMap:null,metalnessMap:null,alphaMap:null,displacementMap:null,clearcoatMap:null,clearcoatRoughnessMap:null,clearcoatNormalMap:null,normalMapType:s,combine:e.MultiplyOperation,clone:function(e){const a=o.call(this);return this.map&&(a.map=this.map),this.aoMap&&(a.aoMap=this.aoMap),this.envMap&&(a.envMap=this.envMap),this.bumpMap&&(a.bumpMap=this.bumpMap),this.normalMap&&(a.normalMap=this.normalMap),this.lightMap&&(a.lightMap=this.lightMap),this.emissiveMap&&(a.emissiveMap=this.emissiveMap),this.specularMap&&(a.specularMap=this.specularMap),this.roughnessMap&&(a.roughnessMap=this.roughnessMap),this.metalnessMap&&(a.metalnessMap=this.metalnessMap),this.alphaMap&&(a.alphaMap=this.alphaMap),this.displacementMap&&(a.displacementMap=this.displacementMap),this.clearcoatMap&&(a.clearcoatMap=this.clearcoatMap),this.clearcoatRoughnessMap&&(a.clearcoatRoughnessMap=this.clearcoatRoughnessMap),this.clearcoatNormalMap&&(a.clearcoatNormalMap=this.clearcoatNormalMap),a.templates=this.templates,a}}),Object.defineProperties(e.CustomMaterial.prototype,{specular:{get:function(){return this.uniforms.specular.value},set:function(e){this.uniforms.specular.value=e}},shininess:{get:function(){return this.uniforms.shininess.value},set:function(e){this.uniforms.shininess.value=e}}});const d={MeshLambertMaterial:{id:"meshlambert",name:"lambert"},MeshBasicMaterial:{id:"meshbasic",name:"basic"},MeshStandardMaterial:{id:"meshphysical",name:"physical"},MeshPhongMaterial:{id:"meshphong",name:"phong"},MeshMatcapMaterial:{id:"meshmatcap",name:"matcap"},PointsMaterial:{id:"points",name:"points"},LineDashedMaterial:{id:"dashed",name:"linedashed"},MeshDepthMaterial:{id:"depth",name:"depth"},MeshNormalMaterial:{id:"normal",name:"normal"},MeshDistanceMaterial:{id:"distanceRGBA",name:"distanceRGBA"},SpriteMaterial:{id:"sprite",name:"sprite"}},f={lightsBegin:"?#include <lights_fragment_maps>",lightsEnd:"?#include <aomap_fragment>",colorBegin:"?#include <logdepthbuf_fragment>",colorEnd:"?#include <tonemapping_fragment>",transformBegin:"?#include <morphtarget_vertex>",transformEnd:"?#include <project_vertex>"},g={alphaTest:{as:"ALPHATEST",not:0}},v={opacity:{value:1},specular:{value:new i(1118481)}},S={points:a.points,sprite:a.sprite,dashed:{scale:{value:1},dashSize:{value:1},totalSize:{value:2}},normal:{opacity:v.opacity},toon:{specular:v.specular,shininess:{value:30}},standard:{shininess:{value:30},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}},physical:{shininess:{value:30},roughness:{value:1},metalness:{value:.5},envMapIntensity:{value:1}},phong:{specular:v.specular,shininess:{value:30}},cube:{opacity:v.opacity},distanceRGBA:{nearDistance:{value:1},farDistance:{value:1e3}},shadow:{opacity:v.opacity}},x={map:"USE_MAP",aoMap:"USE_AOMAP",envMap:"USE_ENVMAP",bumpMap:"USE_BUMPMAP",normalMap:"USE_NORMALMAP",lightMap:"USE_LIGHTMAP",emissiveMap:"USE_EMISSIVEMAP",specularMap:"USE_SPECULARMAP",roughnessMap:"USE_ROUGHNESSMAP",metalnessMap:"USE_METALNESSMAP",alphaMap:"USE_ALPHAMAP",displacementMap:"USE_DISPLACEMENTMAP"};function E(e,a){a=a||{};for(let t in e){const i=e[t];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?a[t]=i.clone():Array.isArray(i)?a[t]=i.slice():a[t]=i}return a}function y(e){return e&&void 0!==e.value?e:{value:e}}function P(e,a,t=!1,i=!1,s=!1,r=!1){a=a||{};for(let n in e){const l=e[n];l&&(!t||null!==l.value&&0!==l.value)&&(l.shared||l.linked&&r?a[n]=l:(a[n]=E(l),!0===i&&(a[n].shared=!0),!0===s&&(a[n].mixed=!0)))}return a}function b(a,t){for(let i in t){const s=t[i];if(void 0!==f[i]&&(i=f[i]),s instanceof Object)void 0===e.ShaderChunk[i]?console.error('THREE.ShaderMaterial.extend: ShaderChunk "%s" not found',i):a=a.replace("#include <"+i+">",b(e.ShaderChunk[i],s));else if("@"===i[0]){const e=i.substr(1);a=a.replace(e,s)}else if("?"===i[0]){const e=i.substr(1);a=a.replace(e,s+"\n"+e)}else a?a=a.replace(i,i+"\n"+s):console.error("THREE.patchShader: chunk not found '%s'",i)}return a}function D(e,a,t,i,s){void 0!==x[e]&&a&&a.value&&(void 0!==s[e]?s[e]=a.value:t[x[e]]=!0);const r=g[e];void 0===r||void 0!==r.not&&r.not===value||(t[r.as]=a.value)}function L(e,a,t,i){if(a.uniforms&&t)for(let s in a.uniforms){t.uniforms[s]||(t.uniforms[s]={});let r=y(a.uniforms[s]);i&&!1===D(s,r,i,0,e)||(t.uniforms[s]=r)}}function A(e,a,t){if(e.uniforms)for(let i in e.uniforms){let s=e.uniforms[i];s&&(s=y(s),s.mixed&&void 0===a.uniforms[i]&&(a.uniforms[i]=s.shared?s:E(s),t&&D(i,s,t)))}}function _(t,i,s){return!1===s.explicit?P(e.ShaderLib[t].uniforms,i):function(e,t,i){!function(e,t){e&&(e.envMap&&P(a.envmap,t),e.aoMap&&P(a.aomap,t),e.lightMap&&P(a.lightmap,t),e.bumpMap&&P(a.bumpmap,t),e.normalMap&&P(a.normalmap,t),e.displacementMap&&P(a.displacementmap,t),e.clearcoatNormalMap&&P(a.clearcoatnormalmap,t))}(t.uniforms,i),!1!==t.common&&P(a.common,i),void 0!==S[e]&&P(S[e],i);const s=t.fog||(t.material?t.material.fog||t.material.useFog:null),r=t.lights||(t.material?t.material.lights:null);if(s&&P(a.fog,i),r)if(t.use){const e=t.use,s=(e.indexOf("sharedLights"),e.indexOf("shadows")>-1);e.indexOf("PointLight")>-1&&(P(a.lights.pointLights,i),s&&(P(a.pointLightShadows,i),P(a.pointShadowMap,i),P(a.pointShadowMatrix,i))),e.indexOf("SpotLight")>-1&&(P(a.lights.spotLights,i),s&&(P(a.spotLightShadows,i),P(a.spotShadowMap,i),P(a.spotShadowMatrix,i))),e.indexOf("DirectionalLight")>-1&&(P(a.lights.directionalLights,i),s&&(P(a.directionalLightShadows,i),P(a.directionalShadowMap,i),P(a.directionalShadowMatrix,i))),e.indexOf("LightProbe")>-1&&P(a.lights.lightProbe,i),e.indexOf("AmbientLight")>-1&&P(a.lights.ambientLightColor,i),e.indexOf("ReactAreaLight")>-1&&P(a.lights.rectAreaLights,i),e.indexOf("HemisphereLight")>-1&&P(a.lights.hemisphereLights,i)}else P(m,i);return i}(t,s,i)}function w(e,a,t=L,i=null){let s=(a.header||"")+"\n",r=(a.vertexHeader||"")+"\n"+e.vertexShader,n=(a.fragmentHeader||"")+"\n"+e.fragmentShader;return a.vertexEnd&&(r=r.replace(/\}(?=[^.]*$)/g,a.vertexEnd+"\n}")),a.fragmentEnd&&(n=n.replace(/\}(?=[^.]*$)/g,a.fragmentEnd+"\n}")),void 0!==a.vertex&&(r=b(r,a.vertex)),void 0!==a.fragment&&(n=b(n,a.fragment)),e.vertexShader=s+r,e.fragmentShader=s+n,t instanceof Function&&t(a,e,i),e}m=P(a.lights,{},!1,!0),e.cloneUniforms=P,e.cloneUniform=E,e.patchShader=w,e.mapShader=function(a,t){const i=d[a];return e.ShaderChunk[i.id+"_"+("vertex"===t?"vert":"frag")]},e.extendMaterial=M}(THREE);