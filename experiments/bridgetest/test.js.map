{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/worker/debug.ts","webpack:///./src/worker/proxy.ts","webpack:///./src/worker/path.ts","webpack:///./src/worker/referencify.ts","webpack:///./src/worker/handlers.ts","webpack:///./src/worker/workerbridge.ts","webpack:///./experiments/bridgetest/test.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","IN_WINDOW","window","IN_WORKER","DBG_ME","DBG_LOG","msgs","_createProxy","bridge","ref","JSON","stringify","children","resolvePath","remoteOtherIndexCounter","enqueueMsg","kind","path","dispose","id","undefined","Proxy","set","target","prop","val","referencifyObject","receiver","parent","makeLazyPath","apply","thisArg","args","construct","obj","copy","Array","isArray","wrapped","referencifyChildren","__ref__","fn","__cb__","localOwnIndexCounter","newIndex","localRegistry","referencifyFunction","Error","resolveReferences","remoteOwnIndexCounter","field","resolveReferenceMembers","handleMessage","msg","connected","sendWhenConnected","sendAll","handleReady","remoteRegistry","add","pendingProxies","resolve","handleRegister","child","localOtherIndexCounter","handleLinkage","result","console","warn","handleCall","handleNew","handlePropertySet","handleDispose","workerFile","worker","Set","msgQueue","this","Worker","onmessage","receive","push","length","postMessage","event","data","remoteKey","isNaN","Promise","log","setInterval","testObject","setTimeout","register","runWorker","createProxy","method","runWindow"],"mappings":"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","file":"bridgetest/test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 51);\n","\nexport const DEBUG = false\nexport const IN_WINDOW = typeof(window) !== \"undefined\" && \"document\" in window\nexport const IN_WORKER = !IN_WINDOW\nexport const DBG_ME = IN_WORKER? \"worker\" : \"window\"\nexport const DBG_OTHER = IN_WORKER? \"window\" : \"worker\"\n\nexport function DBG_LOG(...msgs:any[]){\n\tif(DEBUG){\n\t\tconsole.log(...msgs)\n\t}\n}","import { DBG_LOG, DBG_ME, DBG_OTHER } from \"./debug\"\nimport { ID, makeLazyPath, Reference } from \"./path\"\nimport { referencifyObject } from \"./referencify\"\nimport { WorkerBridge } from \"./workerbridge\"\n\n// more general proxy creation, also for anonymous objects and child objects\nexport function _createProxy(bridge: WorkerBridge, ref: Reference):any{\n\t// ref defines how this proxy relates to its target on the other side\n\t// - ID as Key means, the proxied object was explicitly registered\n\t//   on the remote side with a name\n\t// - ID as Index means, the proxied object is the result of a get\n\t//   or a call and it has no name but an index\n\t// - LazyPath means that this proxy relates to its target by being a field\n\t//   of its parent proxy\n\n\tDBG_LOG(DBG_ME, \"creates proxy to\", \n\t\tJSON.stringify((typeof(ref) === \"function\")? ref() : ref))\n\n\t// keep track of all the members that were get-ed\n\tlet children:{[key: string]:any}={}\n\n\t// If not yet done, directly link this proxy\n\t// to the corresponding object on the remote side.\n\t// It gets an index entry in the remote registry.\n\tfunction resolvePath():ID {\n\t\tif(typeof(ref) === \"function\"){\n\t\t\tDBG_LOG(\n\t\t\t\tDBG_ME, \"requests\",\n\t\t\t\tDBG_OTHER, \"[\", bridge.remoteOtherIndexCounter, \"] =\", JSON.stringify(ref())\n\t\t\t)\n\n\t\t\tbridge.enqueueMsg({kind:\"link\", path:ref()})\n\t\t\tref = bridge.remoteOtherIndexCounter--\n\t\t}\n\t\treturn ref\n\t}\n\n\t// this will be a special member of the proxy that also\n\t// deletes the registry entry on the remote side and\n\t// sets the reference of this proxy to undefined\n\t// so the GC can do its job\n\tfunction dispose(){\n\t\tbridge.enqueueMsg({\n\t\t\tkind:\"del\",\n\t\t\tid:resolvePath()\n\t\t})\n\t\tref = undefined // ensure this proxy is not used further\n\t}\n\n\treturn new Proxy(Object, {\n\n\t\tset(target:any, prop:string, val:any){\n\t\t\tbridge.enqueueMsg({\n\t\t\t\tkind:\"set\",\n\t\t\t\tid:resolvePath(),\n\t\t\t\tprop, val:referencifyObject(bridge, val)\n\t\t\t})\n\t\t\treturn true\n\t\t},\n\n\t\tget(target:any, prop:string, receiver:any){\n\t\t\tif(prop === \"then\"){\n\t\t\t\treturn // nothing so this proxy cannot act as a promise\n\t\t\t}\n\t\t\tif(prop === \"__ref__\"){\n\t\t\t\treturn resolvePath()\n\t\t\t}\n\t\t\tif(prop === \"dispose\"){\n\t\t\t\treturn dispose\n\t\t\t}\n\t\t\tif(!(prop in children)){\n\t\t\t\tchildren[prop] = _createProxy(bridge, makeLazyPath(ref, prop))\n\t\t\t}\n\t\t\treturn children[prop]\n\t\t},\n\n\t\tapply(target:any, thisArg:any, args:any[]){\n\t\t\tbridge.enqueueMsg({\n\t\t\t\tkind:\"call\",\n\t\t\t\tid:resolvePath(),\n\t\t\t\targs:referencifyObject(bridge, args)\n\t\t\t})\n\t\t\tDBG_LOG(\n\t\t\t\tDBG_ME, \"calls\", DBG_OTHER, \"[\", resolvePath(), \"]\",\n\t\t\t\t\", store result in\", DBG_OTHER, \"[\", bridge.remoteOtherIndexCounter, \"]\"\n\t\t\t)\n\t\t\treturn _createProxy(bridge, bridge.remoteOtherIndexCounter--)\n\t\t},\n\n\t\tconstruct(target:any, args:any){\n\t\t\tbridge.enqueueMsg({\n\t\t\t\tkind:\"new\",\n\t\t\t\tid:resolvePath(),\n\t\t\t\targs:referencifyObject(bridge, args)\n\t\t\t})\n\t\t\tDBG_LOG(\n\t\t\t\tDBG_ME, \"calls new on\", DBG_OTHER, \"[\", resolvePath(), \"]\",\n\t\t\t\t\", store object in\", DBG_OTHER, \"[\", bridge.remoteOtherIndexCounter, \"]\"\n\t\t\t)\n\t\t\treturn _createProxy(bridge, bridge.remoteOtherIndexCounter--)\n\t\t}\n\t})\n}","export type Key = string // for explicitly registered objects\nexport type Index = number // for automatically registered objects\nexport type ID = Key | Index // for all objects\nexport type Path = ID[] // for relating a proxy via its parent (or grandparent etc.)\nexport type LazyPath = ()=>Path // for lazy evaluation\nexport type Reference = ID | LazyPath\n\nexport function makeLazyPath(parent: Reference, prop: string){\n\t// a lazy path is a function that returns a path when it's called\n\treturn function(){\n\t\tif(typeof(parent) === \"function\"){ // the parent is itself a lazy path\n\t\t\treturn [...parent(), prop]\n\t\t}\n\t\telse{ // the parent is already a directly linked reference\n\t\t\treturn [parent, prop]\n\t\t}\n\t}\n}","// these functions deal with substitution of arguments and callbacks with proxies\n\nimport { DBG_LOG, DBG_ME, DBG_OTHER } from \"./debug\"\nimport { _createProxy } from \"./proxy\"\nimport { WorkerBridge } from \"./workerbridge\"\n\ntype Pod = any\ntype TaggedCallback = Function & {__cb__?:number}\n\nexport function referencifyFunction(bridge:WorkerBridge, fn:TaggedCallback){\n\tif(fn.__cb__ === undefined){\n\t\t// tag this function with a __cb__ index\n\t\t// so that it will not be indexed multiple times\n\t\t// TODO: if we allow the bridge to be reset, all tagged\n\t\t// functions must be untagged\n\t\tDBG_LOG(DBG_ME, \"[\", bridge.localOwnIndexCounter, \"] = callback\")\n\t\tDBG_LOG(fn)\n\n\t\tlet newIndex = bridge.localOwnIndexCounter++\n\t\tfn.__cb__ = newIndex\n\t\tbridge.localRegistry[newIndex] = fn\n\t\treturn {__cb__:\"new\"}\n\t}\n\telse{\n\t\treturn {__cb__:fn.__cb__}\n\t}\n}\n\nexport function referencifyChildren(bridge:WorkerBridge, obj:any){\n\tlet copy:any = Array.isArray(obj)? [] : {}\n\n\tfor(let key in obj){\n\n\t\tlet wrapped = referencifyObject(bridge, obj[key])\n\n\t\tif(typeof(wrapped) === \"object\"){\n\t\t\tif(\"__cb__\" in wrapped){\n\t\t\t\t// this object or a sub object contains callbacks\n\t\t\t\tcopy[\"__cb__\"] = true\n\t\t\t}\n\t\t\tif(\"__ref__\" in wrapped){\n\t\t\t\t// this object or a sub object contains proxies\n\t\t\t\tcopy[\"__ref__\"] = true\n\t\t\t}\n\t\t}\n\n\t\tcopy[key] = wrapped\n\t}\n\treturn copy\n}\n\n// scan an object for functions, store local references for them\n// and replace the functions with the references\n// this is for sending callbacks through the worker bridge\nexport function referencifyObject(bridge:WorkerBridge, value:any):Pod{\n\tswitch(typeof(value)){\n\t\tcase \"undefined\":\n\t\tcase \"number\":\n\t\tcase \"string\":\n\t\tcase \"boolean\":\n\t\t\treturn value\n\t\tcase \"object\":\n\t\t\treturn referencifyChildren(bridge, value)\n\t\tcase \"function\":\n\t\t\tif(value.__ref__ === undefined){\n\t\t\t\treturn referencifyFunction(bridge, value)\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// value is not a function but a proxy object\n\t\t\t\t// (all bridge proxies wrap functions so operator() works)\n\t\t\t\treturn {__ref__:value.__ref__}\n\t\t\t}\n\t}\n\n\tthrow new Error(\"unsendable type: \" + typeof(value))\n}\n\nexport function resolveReferenceMembers(bridge:WorkerBridge, obj:any){\n\tif(\"__cb__\" in obj){\n\t\tif(typeof(obj[\"__cb__\"]) === \"number\"){\n\t\t\t// reference to a callback that was already registered before\n\t\t\t// return another proxy to it\n\t\t\t// TODO: are we allowed to hand out multiple proxies to the same object?\n\t\t\t// what if only one of them gets disposed?\n\t\t\treturn _createProxy(bridge, obj[\"__cb__\"])\n\t\t}\n\t\telse if(obj[\"__cb__\"] === \"new\"){\n\t\t\tDBG_LOG(\n\t\t\t\tDBG_ME, \"expects that\",\n\t\t\t\tDBG_OTHER, \"[\", bridge.remoteOwnIndexCounter, \"] is a callback\"\n\t\t\t)\n\t\t\t\n\t\t\t// return a new proxy to a newly registered callback\n\t\t\treturn _createProxy(bridge, bridge.remoteOwnIndexCounter++)\n\t\t}\n\t\telse if(obj[\"__cb__\"] === true){\n\t\t\t// a child or a grandchild etc. is a callback\n\t\t\tfor(let field in obj){\n\t\t\t\tobj[field] = resolveReferences(bridge, obj[field])\n\t\t\t}\n\t\t\treturn obj\n\t\t}\n\t\telse{\n\t\t\tthrow new Error(\"unexpected callback reference type\")\n\t\t}\n\t}\n\telse if(\"__ref__\" in obj){\n\t\tif(\n\t\t\ttypeof(obj[\"__ref__\"]) === \"number\" ||\n\t\t\ttypeof(obj[\"__ref__\"]) === \"string\"\n\t\t){\n\t\t\t// the remote object is a proxy, return the registry entry\n\t\t\treturn bridge.localRegistry[obj.__ref__]\n\t\t}\n\t\telse if(obj[\"__ref__\"] === true){\n\t\t\t// a child or a grandchild etc. is a proxy\n\t\t\tfor(let field in obj){\n\t\t\t\tobj[field] = resolveReferences(bridge, obj[field])\n\t\t\t}\n\t\t\treturn obj\n\t\t}\n\t\telse{\n\t\t\tthrow new Error(\"unexpected reference type\")\n\t\t}\n\t}\n\telse{\n\t\treturn obj\n\t}\n}\n\nexport function resolveReferences(bridge:WorkerBridge, value:Pod):any{\n\tswitch(typeof(value)){\n\t\tcase \"undefined\":\n\t\tcase \"number\":\n\t\tcase \"string\":\n\t\tcase \"boolean\":\n\t\t\treturn value\n\t\tcase \"object\":\n\t\t\treturn resolveReferenceMembers(bridge, value)\n\t}\n}","\n// here are the handler methods of the bridge\n// the leading underscore is so that you don't accidentally call\n// doStuff() instead of bridge.doStuff()\n\nimport { BridgeMsg, CallMsg, DisposeMsg, LinkMsg, NewMsg, RegisterMsg, SetMsg } from \"./messages\"\nimport {DEBUG, DBG_ME, DBG_OTHER} from \"./debug\"\nimport { WorkerBridge } from \"./workerbridge\"\nimport { resolveReferences } from \"./referencify\"\n\nexport function handleMessage(bridge:WorkerBridge, msg:BridgeMsg){\n\tswitch(msg.kind){\n\t\tcase \"ready\":\n\t\t\thandleReady(bridge)\n\t\t\tbreak\n\t\tcase \"reg\":\n\t\t\thandleRegister(bridge, msg)\n\t\t\tbreak\n\t\tcase \"link\":\n\t\t\thandleLinkage(bridge, msg)\n\t\t\tbreak\n\t\tcase \"call\":\n\t\t\thandleCall(bridge, msg)\n\t\t\tbreak\n\t\tcase \"new\":\n\t\t\thandleNew(bridge, msg)\n\t\t\tbreak\n\t\tcase \"set\":\n\t\t\thandlePropertySet(bridge, msg)\n\t\t\tbreak\n\t\tcase \"del\":\n\t\t\thandleDispose(bridge, msg)\n\t\t\tbreak\n\t}\n}\n\nfunction handleReady(bridge:WorkerBridge){\n\tbridge.connected = true\n\tif(bridge.sendWhenConnected){\n\t\tbridge.sendAll()\n\t}\n}\n\nfunction handleRegister(bridge:WorkerBridge, msg:RegisterMsg){\n\tbridge.remoteRegistry.add(msg.id)\n\tif(msg.id in bridge.pendingProxies){\n\t\tfor(let resolve of bridge.pendingProxies[msg.id]){\n\t\t\tresolve()\n\t\t}\n\t}\n}\n\nfunction handleLinkage(bridge:WorkerBridge, msg:LinkMsg){\n\tlet obj:any = bridge.localRegistry\n\tfor(let field of (msg as LinkMsg).path){\n\t\tlet child = obj[field]\n\t\tif(typeof(child) === \"function\"){\n\t\t\tchild = child.bind(obj) // make sure we keep \"bridge\"\n\t\t}\n\t\tobj = child\n\t}\n\tif(typeof(obj) !== \"object\" && typeof(obj) !== \"function\"){\n\t\tthrow new Error(\"tried to link a field which is not an object or a method: \" + msg.path)\n\t}\n\tif(DEBUG){\n\t\tconsole.log(DBG_ME, \"[\", bridge.localOtherIndexCounter, \"] =\")\n\t\tconsole.log(obj)\n\t}\n\tbridge.localRegistry[bridge.localOtherIndexCounter--] = obj\n}\n\nfunction handleCall(bridge:WorkerBridge, msg:CallMsg){\n\tlet result = bridge.localRegistry[msg.id](\n\t\t...resolveReferences(bridge, msg.args)\n\t)\n\tif(\n\t\ttypeof(result) === \"object\" ||\n\t\ttypeof(result) === \"function\"\n\t){\n\t\tif(DEBUG){\n\t\t\tconsole.log(DBG_ME, \"[\", bridge.localOtherIndexCounter, \"] is result\", result)\n\t\t}\n\t\tbridge.localRegistry[bridge.localOtherIndexCounter--] = result\n\t}\n\telse{\n\t\tif(result !== undefined){\n\t\t\tconsole.warn(\"result of remotely called function will be ignored\")\n\t\t}\n\t\t// the remote side will inc its counter so we also have to\n\t\tif(DEBUG){\n\t\t\tconsole.log(\n\t\t\t\tDBG_ME, \"discards result\", result,\n\t\t\t\t\"and skips index\", bridge.localOtherIndexCounter\n\t\t\t)\n\t\t}\n\t\tbridge.localOtherIndexCounter--\n\t}\n}\n\nfunction handleNew(bridge:WorkerBridge, msg:NewMsg){\n\tlet result = new bridge.localRegistry[msg.id](\n\t\t...resolveReferences(bridge, msg.args)\n\t)\n\tif(DEBUG){\n\t\tconsole.log(DBG_ME, \"[\", bridge.localOtherIndexCounter, \"] is the new\", result)\n\t}\n\tbridge.localRegistry[bridge.localOtherIndexCounter--] = result\n}\n\nfunction handlePropertySet(bridge:WorkerBridge, msg:SetMsg){\n\tbridge.localRegistry[msg.id][msg.prop] =\n\t\tresolveReferences(bridge, msg.val)\n}\n\nfunction handleDispose(bridge:WorkerBridge, msg: DisposeMsg){\n\tif(bridge.localRegistry[msg.id].dispose !== undefined){\n\t\tbridge.localRegistry[msg.id].dispose()\n\t}\n\tdelete bridge.localRegistry[msg.id]\n}\n\n","\n/*\nParadigms:\n\n- the bridge is intended to change and call objects on the remote side,\n  you never get any values back, only handles to remote objects\n- if you need to get values back, send callbacks and call them there\n- don't use new dynamically generated callbacks all the time as they are\n  going to persist in the registry and won't get garbage collected\n*/\n\nimport { DBG_LOG, DBG_ME, DBG_OTHER } from \"./debug\"\nimport { handleMessage } from \"./handlers\"\nimport { Key } from \"./path\"\nimport { BridgeMsg } from \"./messages\"\nimport { _createProxy } from \"./proxy\"\n\n\nexport class WorkerBridge{\n\t\n\tworker:Worker = undefined\n\tconnected = false\n\tsendWhenConnected = false\n\n\t// locally stored objects\n\t// (typescript complains about key:Key and about key:(string | number) )\n\tlocalRegistry:{\n\t\t[key: string]: any,\n\t\t[index: number]: any\n\t} = {}\n\n\t// remotely manually registered objects\n\tremoteRegistry = new Set<string>()\n\n\t// proxies that were requested but we don't know yet if the other side has registered them yet\n\t// they will hang in promise limbo until we get the respective \"reg\" message\n\tpendingProxies:{\n\t\t[key: string]: (()=>void)[] // array of promise resolver functions\n\t} = {}\n\t\n\t// counter for locally stored anonymous objects\n\t// whose creation was caused by this side, counts positive\n\tlocalOwnIndexCounter = 1\n\t// counter for locally stored anonymous objects\n\t// whose creation was caused by the other side, counts negative\n\tlocalOtherIndexCounter = -1\n\n\t// counter for remotely stored anonymous objects\n\t// whose creation was caused by the remote side itself, counts positive\n\tremoteOwnIndexCounter = 1\n\t// counter for remotely stored anonymous objects\n\t// whose creation was caused by this side, counts negative\n\tremoteOtherIndexCounter = -1\n\n\t/** leave worker empty when calling from inside a worker\n\t * and building a bridge to the window */\n\tconstructor(workerFile?:string){\n\t\tif(workerFile !== undefined){\n\t\t\tthis.worker = new Worker(workerFile)\n\t\t\tthis.worker.onmessage = this.receive.bind(this)\n\t\t}\n\t\telse{\n\t\t\tonmessage = this.receive.bind(this)\n\t\t\tthis.enqueueMsg({kind:\"ready\"})\n\t\t\tthis.sendAll()\n\t\t\tthis.connected = true\n\t\t}\n\t}\n\n\tmsgQueue: BridgeMsg[] = []\n\n\tenqueueMsg(msg:BridgeMsg){\n\t\tthis.msgQueue.push(msg)\n\t}\n\n\tsendAll(){\n\t\tif(this.msgQueue.length == 0){\n\t\t\treturn\n\t\t}\n\n\t\tDBG_LOG(DBG_ME, \"->\", DBG_OTHER, \":\")\n\t\tfor(let msg of this.msgQueue){\n\t\t\tDBG_LOG(\"-> \" + JSON.stringify(msg))\n\t\t}\n\n\t\tif(this.worker !== undefined){\n\t\t\tif(this.connected){\n\t\t\t\tthis.worker.postMessage(this.msgQueue)\n\t\t\t\tthis.msgQueue = []\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.sendWhenConnected = true\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t// TypeScript does not know we mean postMessage from inside a worker\n\t\t\t//@ts-ignore\n\t\t\tpostMessage(this.msgQueue)\n\t\t\tthis.msgQueue = []\n\t\t}\n\t}\n\n\treceive(event:MessageEvent){\n\t\tfor(let i in event.data){\n\t\t\tlet msg = event.data[i] as BridgeMsg\n\t\t\tDBG_LOG(DBG_ME, \"handles\")\n\t\t\tDBG_LOG(msg)\n\t\t\thandleMessage(this, msg)\n\t\t}\n\t}\n\n\t/** register an object for being accessible by the remote side */\n\tregister(object:Object, name:string){\n\t\tDBG_LOG(DBG_ME, \"[\", name, \"] =\", object)\n\t\tthis.localRegistry[name] = object\n\t\tthis.enqueueMsg({kind:\"reg\", id:name})\n\t}\n\n\t/** create a proxy for an object on the remote side */\n\tasync createProxy(remoteKey: Key){\n\t\t// this function is an interface to the outside, it only allows reference\n\t\t// to targets that were explicitly registered on the remote side\n\t\tif(!isNaN(remoteKey as any)){\n\t\t\tthrow new Error(\"numeric indices are reserved for anonymous objects\")\n\t\t}\n\t\tif(remoteKey in this.remoteRegistry){\n\t\t\treturn _createProxy(this, remoteKey)\n\t\t}\n\t\telse{\n\t\t\tlet bridge = this\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tif(!(remoteKey in bridge.pendingProxies))\n\t\t\t\t{\n\t\t\t\t\tbridge.pendingProxies[remoteKey] = []\n\t\t\t\t}\n\t\t\t\tbridge.pendingProxies[remoteKey].push(\n\t\t\t\t\tfunction(){\n\t\t\t\t\t\tresolve(_createProxy(bridge, remoteKey))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\t}\n}\n","import { WorkerBridge } from \"../../src/worker/workerbridge\"\nimport {IN_WORKER, IN_WINDOW, DBG_ME} from \"../../src/worker/debug\"\n\nconsole.log(\"hi from \" + DBG_ME)\n\n// this will start this file again as a worker\nlet bridge = IN_WINDOW? new WorkerBridge(\"./test.js\") : new WorkerBridge()\n\nasync function runWorker(){\n\tlet testObject = {\n\t\tfield:\"hi\",\n\t\tmethod(){\n\t\t\tconsole.log(\"method called\")\n\t\t}\n\t}\n\t\n\tsetTimeout(function(){\n\t\tbridge.register(testObject, \"testObject\")\n\t}, 300)\n}\n\nasync function runWindow(){\n\tlet testProxy = await bridge.createProxy(\"testObject\")\n\ttestProxy.method()\n}\n\nsetInterval(function(){bridge.sendAll()}, 100)\nIN_WORKER? runWorker() : runWindow()"],"sourceRoot":""}